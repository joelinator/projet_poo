/* Examen de POO.
 * Matricule: 24NTIL01A
 * Nom: ASA MAPA Joel Gedeon
 * Classe: GINFO/TIC4
 * */
#include <iostream>
#include <string>

using namespace std;

// Classe de base Personne
class Personne {
public:
  string nom;
  int age;

  // Constructeur traditionnel (avec initialisation dans le corps)
  Personne(string nom, int age) {
    this->nom =
        nom; // Utilisation de this pour distinguer les attributs des paramètres
    this->age = age;
  }

  virtual void afficherInfos() { // Methode afficherIfos.
    cout << "+____________________________" << endl;
    cout << "|\t-Nom: \t" << nom << endl;
    cout << "|\t-Age: \t" << age << endl;
  }
};

// Classe Etudiant héritant de Personne
class Etudiant : public Personne {
public:
  string niveau;

  // Constructeur pour initialiser les attributs
  Etudiant(string nom, int age, string niveau)
      : Personne(nom, age) { // Appel au constructeur de la classe de base
    this->niveau = niveau;
  }

  // Redefinition de la methode afficherInfos
  void afficherInfos() override {
    cout << "+____________________________" << endl;
    cout << "|\tEtudiant\t" << endl;
    Personne::afficherInfos(); // Appel a la methode afficherInfos de la classe
                               // de base
    cout << "|\t-Niveau: " << niveau << endl;
    cout << "+____________________________" << endl;
  }
};

// Classe Enseignant héritant de Personne
class Enseignant : public Personne {
public:
  string matiere;

  // Constructeur pour initialiser les attributs.
  Enseignant(string nom, int age, string matiere)
      : Personne(nom, age) { // Appel au constructeur de la classe de base
    this->matiere = matiere;
  }
  // redifinition de la methode afficherInfos.
  void afficherInfos() override {
    cout << "+____________________________" << endl;
    cout << "|\tEnseignant\t" << endl;
    Personne::afficherInfos(); // Appel a la methode afficherInfos de la classe
                               // de base
    cout << "|\t-Matiere: " << matiere << endl;
    cout << "+___________________________" << endl;
  }
};

// Fonction pour saisir les informations d'une personne (étudiant ou enseignant)
template <typename T> // Template pour gérer les deux types (Etudiant et
                      // Enseignant)
T saisirPersonne(const string &type) {
  string nom,
      infoSupplementaire; // Nom et information spécifique (niveau ou matière)
  int age;

  cout << "Saisie des informations de " << type << ":\n";
  cout << "Nom:\t";
  getline(cin >> ws, nom);
  cout << "Age:\t";
  cin >> age;

  if (type == "l'Etudiant") {
    cout << "Niveau (ex: \"Licence 1\"): ";
    getline(cin >> ws, infoSupplementaire);
    cout << endl;
    return T(nom, age, infoSupplementaire); // Retourne un objet Etudiant
  } else {
    cout << "Matiere: ";
    getline(cin >> ws, infoSupplementaire);
    cout << endl;
    return T(nom, age, infoSupplementaire); // Retourne un objet Enseignant
  }
}
int main() {
  // Declaration des variables nom, niveau, matiere et age pour y stocker les
  // valeurs saisies par l'utilisateur.
  string nom, niveau, matiere;
  int age;
  // Saisie des informations de l'étudiant
  Etudiant etudiant = saisirPersonne<Etudiant>("l'Etudiant");
  // Saisie des informations de l'enseignant
  Enseignant enseignant = saisirPersonne<Enseignant>("l'Enseignant");
  // Affichage des informations
  cout << "\t==========Informations==========\n";
  etudiant.afficherInfos();
  cout << endl
       << "................................" << endl
       << endl; // ligne pour separer l'affichage des infos de l'enseignant des
                // infos de l'etudiant
  enseignant.afficherInfos();
  return 0;
}
